import dotNet;

if(table.getByNamespace("System.Windows.Automation['3']")){
	return;
}

::UIAutomationTypes := dotNet.load("UIAutomationTypes");
::UIAutomationClient := dotNet.load("UIAutomationClient");
::UIAutomationClient.import("System.Windows.Automation"); 

namespace System.Windows.Automation{
    
	var types = {
		"AsyncContentLoadedEventArgs";
		"AutomationElementIdentifiers";
		"AutomationEvent";
		"AutomationEventArgs";
		"AsyncContentLoadedState";
		"AutomationIdentifier";
		"AutomationPattern";
		"AutomationProperty";
		"AutomationPropertyChangedEventArgs";
		"AutomationTextAttribute";
		"ControlType";
		"DockPatternIdentifiers";
		"DockPosition";
		"ExpandCollapsePatternIdentifiers";
		"ExpandCollapseState";
		"GridItemPatternIdentifiers";
		"InvokePatternIdentifiers";
		"ItemContainerPatternIdentifiers";
		"MultipleViewPatternIdentifiers";
		"OrientationType";
		"RangeValuePatternIdentifiers";
		"RowOrColumnMajor";
		"ScrollAmount";
		"ScrollItemPatternIdentifiers";
		"ScrollPatternIdentifiers";
		"SelectionItemPatternIdentifiers";
		"SelectionPatternIdentifiers";
		"StructureChangedEventArgs";
		"StructureChangeType";
		"SupportedTextSelection";
		"SynchronizedInputPatternIdentifiers";
		"SynchronizedInputType";
		"TableItemPatternIdentifiers";
		"TablePatternIdentifiers";
		"TextPatternIdentifiers";
		"TogglePatternIdentifiers";
		"ToggleState";
		"TransformPatternIdentifiers";
		"TreeScope";
		"ValuePatternIdentifiers";
		"VirtualizedItemPatternIdentifiers";
		"WindowClosedEventArgs";
		"WindowInteractionState";
		"WindowPatternIdentifiers";
		"WindowVisualState"; 
		"Text"; 
	}
	
	for(k,v in types){ 
		self[[v]] = ::UIAutomationTypes.import("System.Windows.Automation."+v); 
	} 
	
	Text.SafeTextRangeHandle = ::UIAutomationClient.import("System.Windows.Automation.Text.SafeTextRangeHandle"); 
	Text.TextPatternRange = ::UIAutomationClient.import("System.Windows.Automation.Text.TextPatternRange"); 
	
	AutomationElement[["NotSupported"]] = AutomationElement.NotSupported;
	
	And = function(cond,isNot){
		var arr = {}
		for k,v in ..table.eachName(cond){
			if(k=="ControlType"){
				if(type.isString(v)){
					v = ControlType[v];
				}
			}
			..table.push(arr,PropertyCondition(AutomationElement[k+"Property"],v));
		}
		 
	
		var cond;
		if(#arr>1){
			cond = AndCondition(arr)
		}
		else {
			cond = arr[1]
		}
		
		if(isNot){
			cond = NotCondition(cond);
		}
		
		
		return cond;
	}
	
	Or = function(cond,isNot){
		var arr = {}
		for k,v in ..table.eachName(cond){
			if(..table.isArray(v)){
				for(i,v in v){
					if(k=="ControlType"){
						if(type.isString(v)){
							v = ControlType[v];
						}
					}
					..table.push(arr,PropertyCondition(AutomationElement[k+"Property"],v));
				
				} 
			}
			else {
				if(k=="ControlType"){
					if(type.isString(v)){
						v = Automation.ControlType[v];
					}
				}
				..table.push(arr,PropertyCondition(AutomationElement[k+"Property"],v));
			} 
		}
		
		var cond;
		if(#arr>1){
			cond = OrCondition(arr)
		}
		else {
			cond = arr[1]
		}
		
		if(isNot){
			cond = NotCondition(cond);
		}
		
		
		return cond;
	}
	
	FindByAnd = function(cond,root){
		return (root || AutomationElement.RootElement).FindFirst(TreeScope.Descendants, And(cond) )  
	} 
	
	FindByOr = function(cond,root){
		return (root || AutomationElement.RootElement).FindFirst(TreeScope.Descendants, Or(cond) )  
	}

	var TextPatternPattern = TextPattern.Pattern;
	GetCaret = function(hFocus){
		var caretInfo;
		var focusedEle; 

    	try{
    		if(hFocus) focusedEle = AutomationElement.FromHandle(hFocus) 
			else {
				focusedEle = AutomationElement.RootElement.FocusedElement;
				hFocus = focusedEle.Current.NativeWindowHandle;
			}
    	} 
    	if (!focusedEle) return false;
    	
		var textPattern;
		try{	
			textPattern = focusedEle.GetCurrentPattern(TextPatternPattern);
			var selections = textPattern.GetSelection();
			
			..com.Release(textPattern);
			textPattern = null;
			
			if(selections){
				if(selections.Length){
					var cursorRange = selections[1]
					var boundingRectangles = cursorRange.GetBoundingRectangles();
							
            		if(!boundingRectangles.Length){
            	 		//扩展光标位置为文本选区
						cursorRange.ExpandToEnclosingUnit( TextUnit.Character ); 
						boundingRectangles = cursorRange.GetBoundingRectangles();
					}	 
                        			
           			if( boundingRectangles.Length>0) { 
                   		var rc = boundingRectangles[1];
                            
                        caretInfo = {
                           	top = rc.Top;
                           	left = rc.Left;
						   	bottom = rc.Bottom;
						   	right = rc.Right; 
						   	hwnd= hFocus;	
                        }			
                    
            		}
					..com.Release(cursorRange);  
				} 
				
				..com.Release(selections);	
			}
		}
		catch(e){
			if(textPattern) ..com.Release(textPattern);
		}
		
		..com.Release(focusedEle);	
		return caretInfo;
	}
}

/**details(说明)
不建议在同一进程中同时导入 System.Windows.Automation，System.Windows.Automation.3。
如果先导入了 System.Windows.Automation.3 则导入 System.Windows.Automation 时忽略不作任何操作。
end details**/

/**intellisense()
System.Windows.Automation = .NET System.Windows.Automation 组件。\nSystem.Windows.Automation.3 扩展库可导入兼容的库。\n用法相同且扩展了部分接口。\n[相关文档](https://learn.microsoft.com/zh-cn/dotnet/api/system.windows.automation?view=netframework-4.6)\n!dotNetNameSpace.
end intellisense**/

/*****intellisense(System.Windows.Automation)
And(与条件表) = @.And({\n	ClassName = "Notepad",\n	ControlType = "Window";\n})  
And(或条件表) = @.And({\n	ClassName = {"RichEditD2DPT","RICHEDIT50W","Edit" }\n})  
FindByAnd(与条件表) = @.FindByAnd({\n	ClassName = "Notepad",\n	ControlType = "Window";\n})  
FindByOr(或条件表) = @.FindByOr({\n	ClassName = {"RichEditD2DPT","RICHEDIT50W","Edit" }\n}) 
AutomationElement.RootElement.FocusedElement = 获取当前拥有输入焦点的 AutomationElement 对象
AutomationElement.FromHandle(.(hwnd) = 自 @hwnd 参数指定句柄的窗口获取 AutomationElement 对象
GetCaret(__/*hFocus*/) = 获取当前输入光标位置，\n返回表示屏幕位置的 ::RECT 结构体，hwnd 字段指定句柄。\n可选用参数 @1 指定输入焦点所在窗口句柄。\n\n此函数用于 winex.caret ,\n 由 System.Windows.Automation.3 库实现。
end intellisense*****/
